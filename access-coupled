#!/usr/bin/env bash

# Driver script for ACCESS-CM2

# Input environment variables
#
# Executable paths
#     ATMOS_EXEC: The full path to the UM executable
#     ICE_EXEC:   The full path to the CICE executable
#     OCEAN_EXEC: The full path to the MOM executable

# Directories
#     ARCHIVE_DIR
#     ATM_RUNDIR
#     CPL_RUNDIR
#     ICE_RUNDIR
#     OCN_RUNDIR
#     DATAM
#          Directory for time-stamped STASH and dump files. Default=$DATAW.

# Decomposition related
#     UM_ATM_NPROCX:   Number of atmosphere processors east-west.
#     UM_ATM_NPROCY:   Number of atmosphere processors north-south.
#     FLUME_IOS_NPROC: Number of processors for the UM's I/O server.
#     OMP_NUM_THREADS: Applies to UM only
#     OCN_NPROCX
#     OCN_NPROCY
#     ICE_NPROCS

# Other flags
#     COUPLER
#     CONTINUE
#          Flag for Nrun - If not provided a new history file is created from INITHIS.
#          Default=false.
#     RUNID: Stem name of output files.
#     WARM_RESTART_NRUN

# Internal environment variables
#     ATMOS_LINK
#          Name of the symbolic link to the atmosphere executable
#          (as set in OASIS namcouple).
#     ICE_LINK
#          Name of the symbolic link to the ice executable.
#     OCEAN_LINK
#          Name of the symbolic link to the ocean executable.

#     UM_NPES
#     NPROC_MAX
#     OCN_NPES
#     TOT_NPES
#-----------------------------------------------------------------------

set -xeu

echo "ACCESS COUPLED MODEL DRIVER", $PWD

if [[ -z ${COUPLER:-} ]]; then
    echo "[FAIL] Coupler (COUPLER=<model>) not defined in the environment." >&2
    exit 100
fi
if [[ -z ${OCEAN_EXEC:-} ]]; then
    echo "[FAIL] Ocean executable (OCEAN_EXEC=<full path to exec>) not defined in the environment." >&2
    exit 110
fi

# Must match names in OASIS namcouple file
ATMOS_LINK=toyatm
OCEAN_LINK=mom5xx
ICE_LINK=cicexx

ln -sf $ATMOS_EXEC $ATMOS_LINK
ln -sf $OCEAN_EXEC $OCEAN_LINK
ln -sf $ICE_EXEC $ICE_LINK

# Redefine exec names for the setup scripts later:
ATMOS_EXEC=$ATMOS_LINK
OCEAN_EXEC=$OCEAN_LINK

export UM_NPES=$((UM_ATM_NPROCX * UM_ATM_NPROCY))
NPROC_MAX=$((UM_NPES + FLUME_IOS_NPROC))
# If land points are masked, expect that OCN_NPES is set already
# Otherwise simply x * y
export OCN_NPES=${OCN_NPES:-$((OCN_NPROCX * OCN_NPROCY))}
TOT_NPES=$((NPROC_MAX + OCN_NPES + ICE_NPROCS))

HIST_FILE=$RUNID.xhist

# ########################################################################
# ### CICE
# ########################################################################

# Modify main CICE namelist
fix_cice_namelist.py $ICE_RUNDIR/cice_in.nml $ICE_RUNDIR/input_ice.nml
if [[ $? != 0 ]]; then
  echo "Error from fix_cice_namelist"
  exit 1
fi

fix_mom_namelist.py $OCN_RUNDIR/input.nml
if [[ $? != 0 ]]; then
  echo "Error from fix_mom_namelist"
  exit 1
fi

# ########################################################################
# ### OASIS
# ########################################################################

chmod u+w $CPL_RUNDIR/namcouple
fix_namcouple.py $CPL_RUNDIR/namcouple
if [[ $? != 0 ]]; then
  echo "Error from fix_namcouple"
  exit 1
fi

chmod u+w $OCN_RUNDIR/INPUT/diag_table
fix_diag_table.py $OCN_RUNDIR/INPUT/diag_table
if [[ $? != 0 ]]; then
  echo "Error from fix_diag_table"
  exit 1
fi

mkdir -p $OCN_RUNDIR/RESTART $OCN_RUNDIR/HISTORY
mkdir -p $ICE_RUNDIR/RESTART $ICE_RUNDIR/HISTORY

# WARM_RESTART only applied on the first cycle
if [[ $CYLC_TASK_CYCLE_POINT != $CYLC_SUITE_INITIAL_CYCLE_POINT ]]; then
    WARM_RESTART="false"
fi
if [[ ${CONTINUE,,} == "true"  && ${WARM_RESTART,,} == "false" ]] ; then
    # This is a continuation run so copy the restart files
    # ENDDATE from the previous run
    PREVDATE=$(cylc cyclepoint --offset=-P1D --template=CCYYMMDD)
    cp ${ARCHIVEDIR}/restart/cpl/a2i.nc-${PREVDATE} $CPL_RUNDIR/a2i.nc
    cp ${ARCHIVEDIR}/restart/cpl/o2i.nc-${PREVDATE} $CPL_RUNDIR/o2i.nc
    cp ${ARCHIVEDIR}/restart/cpl/i2a.nc-${PREVDATE} $CPL_RUNDIR/i2a.nc

  cd $DATAM
  # Delete all the &NLSTCALL_PP_HIST sections from xhist so that the files do not
  # need to be present. Update paths for CHECKPOINT_DUMP_IM and STREQLOG
  fix_xhist.py ${ARCHIVEDIR}/restart/atm/${RUNID}.xhist-${PREVDATE} ${RUNID}.xhist
  CHECKPOINT_DUMP_IM=$(basename $(get_checkpoint_name.py ${RUNID}.xhist))
  ln -sf ${ARCHIVEDIR}/restart/atm/$CHECKPOINT_DUMP_IM .

  cd $OCN_RUNDIR/INPUT
  tar -xvf  ${ARCHIVEDIR}/restart/ocn/restart-${PREVDATE}.tar

  cd $ICE_RUNDIR/RESTART

  cp ${ARCHIVEDIR}/restart/ice/ice.restart_file-${PREVDATE} 	ice.restart_file
  # Get the file named in ice.restart_file
  cp ${ARCHIVEDIR}/restart/ice/$(basename $(cat ice.restart_file)) .
  cp ${ARCHIVEDIR}/restart/ice/mice.nc-${PREVDATE} 	  	mice.nc

  # Check that the restart file dates matches the cycle date. Don't check on first step
  # of a warm restart, because it may have been altered
  check_restart_dates.py
  if [[ $? != 0 ]]; then
    echo "Mismatch in restart dates"
    exit 1
  fi
fi

# If it's the first cycle of a WARM_RESTART_NRUN set CONTINUE false so the UM
# does an NRUN
if [[ ${WARM_RESTART_NRUN,,} == "true" && $CYLC_TASK_CYCLE_POINT == $CYLC_SUITE_INITIAL_CYCLE_POINT ]] ; then
    echo "Setting CONTINUE=false for WARM_RESTART_RUN"
    export CONTINUE=false
fi

create_rankfile.py

# re-ordered to UM, MOM, ICE, added --report-bindings as per Scott  rwb 180517
export ACCESSRUNCMD="${TOT_DEBUG:-}--rankfile $CYLC_TASK_WORK_DIR/rankfile \
                     -wd $ATM_RUNDIR -n $UM_NPES $CYLC_TASK_WORK_DIR/$ATMOS_LINK : \
                     -wd $OCN_RUNDIR -n $OCN_NPES $CYLC_TASK_WORK_DIR/$OCEAN_LINK : \
                     -wd $ICE_RUNDIR -n $ICE_NPROCS $CYLC_TASK_WORK_DIR/$ICE_LINK"

echo "RUNCOMMAND", $ACCESSRUNCMD

# UM specific setup

cd ${ATM_RUNDIR}

if [[ -z ${VN:-} ]]; then
  echo "[FAIL] UM version (VN=x.y) not defined in the environment." >&2
  exit 10
fi
if [[ ! $VN =~ ^([0-9])+\.([0-9])+$ ]]; then
  echo "[FAIL] UM version \$VN=\"$VN\" not of the form (VN=x.y)."
  exit 20
fi

export DR_HOOK=${DR_HOOK:-0}
export DR_HOOK_OPT=${DR_HOOK_OPT:-noself}
export PRINT_STATUS=${PRINT_STATUS:-PrStatus_Normal}
export UM_THREAD_LEVEL=${UM_THREAD_LEVEL:-MULTIPLE}

# Create new or use existing history file
export HISTORY=${HISTORY:-atmos.xhist}
if [[ ${CONTINUE:-false} == "false" ]] ; then
  rm -f $HISTORY
else
  if [[ ! -r $HISTORY ]]; then
    echo "[FAIL] Cannot read history file $HISTORY" >&2
    exit 30
  fi
fi
export HISTORY_TEMP=thist

# Processor variables
export UM_NPES=$((UM_ATM_NPROCX * UM_ATM_NPROCY))
export NPROC=$((UM_NPES + FLUME_IOS_NPROC))
export HOUSEKEEP=hkfile
export STASHC=STASHC
export ATMOSCNTL=ATMOSCNTL
export SHARED_NLIST=${SHARED_FNAME:-SHARED}
export ERROR_FLAG=errflag
export STASHMASTER=${STASHMSTR:-$UMDIR/vn$VN/ctldata/STASHmaster}
export IDEALISE=IDEALISE
export IOSCNTL=IOSCNTL

export STDOUT_FILE=${ATMOS_STDOUT_FILE:-pe_output/atmos.fort6.pe}
mkdir -p $(dirname $STDOUT_FILE)
# Delete any previous .pe* files:
rm -f $STDOUT_FILE*

# Since we need to process some data after the executable we can trap the EXIT
# signal to do this automatically whenever this script exits.  This also
# catches times when this script is killed for any reason.
SIGNALS='EXIT'
FINALLY() {
  for S in $SIGNALS; do
    trap '' $S # Switch off traps
  done

  PE0_SUFFIX=$(echo $((NPROC - 1)) | sed s/./0/g)
  UM_PE0_STDOUT_FILE="${STDOUT_FILE}${PE0_SUFFIX}"
  if [[ -s "$UM_PE0_STDOUT_FILE" ]]; then
    echo '%PE0 OUTPUT%'
    cat "$UM_PE0_STDOUT_FILE"
  elif [[ -f "$UM_PE0_STDOUT_FILE" ]]; then
    echo "PE0 file exists, but has zero size"
  else
    echo "Could not find PE0 output file: $UM_PE0_STDOUT_FILE"
  fi

  # Remove output from other PEs unless requested otherwise
  if [[ ${ATMOS_KEEP_MPP_STDOUT:-false} == "false" ]] ; then
    for file in ${STDOUT_FILE}* ; do
      if [[ $file != "$UM_PE0_STDOUT_FILE" ]]; then
        rm $file
      fi
    done
  fi

  if [[ -f "$UM_PE0_STDOUT_FILE" ]]; then
    # rose-ana expects fixed filenames so we link to .pe0 as otherwise the
    # filename depends on the processor decomposition
    if [[ $UM_PE0_STDOUT_FILE != ${STDOUT_FILE}0 ]]; then
      ln -sf $(basename $STDOUT_FILE)$PE0_SUFFIX ${STDOUT_FILE}0
    fi
  fi
}

for S in $SIGNALS; do
  trap 'FINALLY' $S
done

# rose mpi-launch -v $COMMAND

# ACCESSRUNCMD not compatible with rose mpi-launch at the moment.
# Using --mca rmaps_base_mapping_policy '' causes problems with totalview so set as
# environment variable instead
# /apps/openmpi/wrapper/mpirun --mca rmaps_base_mapping_policy '' ${ACCESSRUNCMD}
export OMPI_MCA_hwloc_base_mem_alloc_policy=local_only
export OMPI_MCA_rmaps_base_mapping_policy=''
mpirun ${ACCESSRUNCMD}
